import "main.ostw";

enum PlayerRole {
    CREW,
    IMPOSTER
}

globalvar Vector circleCenter = Vector(-208.7, 0.0, -16.4);
playervar PlayerRole role;

// Player Variables
playervar define hudInteractString = "";
playervar Task[] incompleteTasks;
playervar Task[] completeTasks = EmptyArray();

// Crew variables
playervar define numTasks = 0;
playervar define hudTaskString = "";
playervar define hudCompleteTaskString = "";
playervar Task interactableTask;
playervar define isTaskInProgress = false;
playervar define taskProgressTime;

// Imposter variables
playervar define closestCrew;
playervar define canKill = false;
playervar define killCooldown = 0;
playervar define killCount = 0;

rule: "Player Setup"
Event.OnPlayerJoin
{
    DisableGameModeHud(EventPlayer());
    DisableKillFeed(EventPlayer());
    DisableMessages(EventPlayer());
    DisableSpectate(EventPlayer());
    DisableHeroHud(EventPlayer())
    DisableSpectateHUD(EventPlayer());
    DisableNameplates(EventPlayer());
    DisableRespawning(EventPlayer());
    DisableScoreboard(EventPlayer());
    SetUltimateAbilityEnabled(EventPlayer(), false);
    SetMeleeEnabled(EventPlayer(), false);
    SetCrouchEnabled(EventPlayer(), false);
    SetReloadEnabled(EventPlayer(), false);
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);
    SetPrimaryFireEnabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
    //SetDamageReceived(EventPlayer(), 0);
    //SetJumpEnabled(EventPlayer(), false);
    //SetMoveSpeed(EventPlayer(), 300);

    CreateHudText(EventPlayer(), Subheader: <"(X: <0>, Y: <1>, Z: <2>)", XOf(PositionOf(EventPlayer())), YOf(PositionOf(EventPlayer())), ZOf(PositionOf(EventPlayer()))>);
    ChaseVariableAtRate(EventPlayer().killCooldown, 0, 1.0, RateChaseReevaluation.None);
}

void markCenter() {
    CreateEffect(AllPlayers(), Effect.Sphere, Color.Aqua, circleCenter, 1, EffectRev.None);
}

Vector circlePosition(Vector center, ref define slot, ref define totalSlots, define radius) {
    define radians = (2 * Pi() * slot) / totalSlots;
    return Vector(XOf(center) + (radius * CosineFromRadians(radians)), YOf(center), ZOf(center) + (radius * SineFromRadians(radians)));
}

void putPlayerInCircle(ref define player) {
    define pos = circlePosition(circleCenter, SlotOf(player), 10, 8.0)
    Teleport(AllPlayers()[SlotOf(player)], pos);
    SetFacing(AllPlayers()[SlotOf(player)], circleCenter - pos);
}


void assignRoles(ref define imposters) {
    AllPlayers().role = PlayerRole.CREW;
    ChooseArray(AllPlayers(), imposters).role = PlayerRole.IMPOSTER;
}

void assignTasks(ref define player, ref define numTasks) {
    player.numTasks = numTasks;
    player.incompleteTasks = ChooseArray(global_tasks, numTasks);
    if (player.role == PlayerRole.CREW) {
        totalTaskCount += numTasks;
    }
}

void updateHudStrings(ref define player) {
    player.hudTaskString = <"<0><1><2><3><4><5>",
        player.incompleteTasks.Length > 0 ? <"1. <0>\n", player.incompleteTasks[0].Name> : "",
        player.incompleteTasks.Length > 1 ? <"2. <0>\n", player.incompleteTasks[1].Name> : "",
        player.incompleteTasks.Length > 2 ? <"3. <0>\n", player.incompleteTasks[2].Name> : "",
        player.incompleteTasks.Length > 3 ? <"4. <0>\n", player.incompleteTasks[3].Name> : "",
        player.incompleteTasks.Length > 4 ? <"5. <0>\n", player.incompleteTasks[4].Name> : "",
        player.incompleteTasks.Length > 5 ? <"6. <0>\n", player.incompleteTasks[5].Name> : ""
    >;
    player.hudCompleteTaskString = <"<0><1><2><3><4><5>",
        player.completeTasks.Length > 0 ? <"1. <0>\n", player.completeTasks[0].Name> : "",
        player.completeTasks.Length > 1 ? <"2. <0>\n", player.completeTasks[1].Name> : "",
        player.completeTasks.Length > 2 ? <"3. <0>\n", player.completeTasks[2].Name> : "",
        player.completeTasks.Length > 3 ? <"4. <0>\n", player.completeTasks[3].Name> : "",
        player.completeTasks.Length > 4 ? <"5. <0>\n", player.completeTasks[4].Name> : "",
        player.completeTasks.Length > 5 ? <"6. <0>\n", player.completeTasks[5].Name> : ""
    >;
}

void crewUpdate(ref define player) {
    if (player.isTaskInProgress) {
        updateCrewTaskProgress(player);
    } else {
        findCrewNearestTask(player);
    }

    debugUpdate(player);
}

void debugUpdate(ref define player) {
    if (IsButtonHeld(player, Button.Ultimate)) {
        totalCompleteTaskCount++;
        checkEndGame();
    }
}

void updateCrewTaskProgress(ref define player) {
    // Still near enough to task to work on it, and holding the button?
    if (!IsButtonHeld(player, Button.Interact) || DistanceBetween(PositionOf(player), player.interactableTask.Position) > 3) {
        player.isTaskInProgress = false;
        StopChasingVariable(player.taskProgressTime);
        return;
    }
    // If task done, move it to the complete list
    if (player.taskProgressTime >= player.interactableTask.Duration) {
        player.isTaskInProgress = false;
        StopChasingVariable(player.taskProgressTime);
        ModifyVariable(player.completeTasks, Operation.AppendToArray, player.interactableTask);
        ModifyVariable(player.incompleteTasks, Operation.RemoveFromArrayByValue, player.interactableTask);
        totalCompleteTaskCount++;
        updateHudStrings(player);
        checkEndGame();
    }
}


void findCrewNearestTask(ref define player) {
    player.hudInteractString = "";
    // Find first incomplete task within 3 meters
    for (define i=0; i < player.incompleteTasks.Length; i++) {
        if (DistanceBetween(PositionOf(player), player.incompleteTasks[i].Position) <= 3) {
            player.hudInteractString = player.incompleteTasks[i].Name;
            player.interactableTask = player.incompleteTasks[i];

            if (IsButtonHeld(player, Button.Interact)) {
                player.isTaskInProgress = true;
                player.taskProgressTime = 0;
                ChaseVariableAtRate(player.taskProgressTime, player.interactableTask.Duration, 1.0, RateChaseReevaluation.None);
                return;
            }
        }
    }
}

rule: "Player Update Loop"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.CREW)
{
    while (gameState == GameState.Play) {
        crewUpdate(EventPlayer());
        Wait(TICK);
    }
}

void imposterUpdate(ref define player) {
    findImposterNearestCrew(player);
}

void findImposterNearestCrew(ref define player) {
    define closestCrewDistance = 10.0;
    define _closestCrew;
    // Find first incomplete task within 3 meters
    foreach (define crew in FilteredArray(AllLivingPlayers(), ArrayElement().role == PlayerRole.CREW)) {
        define distance = DistanceBetween(PositionOf(player), PositionOf(crew));
        if (distance <= closestCrewDistance) {
            _closestCrew = crew;
            closestCrewDistance = distance;
        }
    }

    if (closestCrewDistance <= 5.0) {
        player.closestCrew = _closestCrew;
        player.canKill = true;
        player.hudInteractString = <"Kill <0>", HeroIconString(HeroOf(closestCrew))>;
    } else {
        player.canKill = false;
        player.hudInteractString = "";
    }
}

rule: "Player: Imposter Interact (Kill)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (EventPlayer().canKill)
if (EventPlayer().killCooldown == 0)
{
    EventPlayer().killCount += 1;
    EventPlayer().canKill = false;
    CreateEffect(
        VisibleTo : AllPlayers(),
        Type      : Effect.Ring,
        Color     : Color.Purple,
        Position  : PositionOf(EventPlayer().closestCrew),
        Radius    : 1,
        Reevaluation: EffectRev.None
    );
    Kill(EventPlayer().closestCrew);
    EventPlayer().killCooldown = KillCooldown.Value;
}

rule: "Player: Imposter Update Loop"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
{
    while (gameState == GameState.Play) {
        imposterUpdate(EventPlayer());
        Wait(TICK);
    }
}