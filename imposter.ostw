import "main.ostw";

// Imposter variables
playervar define closestCrew;
playervar define canKill = false;
playervar define killCooldown = 0;
playervar define canVent = false;
playervar define isVenting = false;

/* Per-tick state update for imposters.
 */
void imposterUpdate(ref define player) {
    player.hudInteractString = "";
    player.canVent = isVentNearby(player);
    if (player.canVent) {
        player.hudInteractString = "Vent";
    }

    if (!player.isVenting) {
        findImposterNearestCrew(player);
    }
}

/* Find the nearest crew member, and determine if they are killable.
 */
void findImposterNearestCrew(ref define player) {
    define closestCrewDistance = 10.0;
    define _closestCrew;
    // Find first incomplete task within 3 meters
    foreach (define crew in FilteredArray(AllPlayers(), ArrayElement().role == PlayerRole.CREW && ArrayElement().isAlive)) {
        define distance = DistanceBetween(PositionOf(player), PositionOf(crew));
        if (distance < closestCrewDistance) {
            _closestCrew = crew;
            closestCrewDistance = distance;
        }
    }

    if (closestCrewDistance <= 5.0) {
        player.closestCrew = _closestCrew;
        player.canKill = true;
        if (player.killCooldown == 0) {
            player.hudInteractString = <"Kill <0> <1>", HeroIconString(HeroOf(closestCrew)), SafePlayerName(closestCrew)>;
        }
    } else {
        player.canKill = false;
    }
}

define isVentNearby(ref define player) {
    foreach (Vector v in global_vents) {
        if (DistanceBetween(PositionOf(player), v) <= 1.0) {
            return true;
        }
    }
    return false;
}

/* If target player is alive, kill them and return true.
 * Return false otherwise.
 */
define killPlayer(define target) "Kill Player" {
    if (IsAlive(target)) {
        ModifyVariable(corpses, Operation.AppendToArray, new Corpse(SafePlayerName(target), PositionOf(target)));
        target.isAlive = false;
        return true;
    } else {
        return false;
    }
}

rule: "Player: Imposter Interact (Vent)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (EventPlayer().canVent)
{
    EventPlayer().canKill = false;
    EventPlayer().canVent = false;
    EventPlayer().isVenting = !EventPlayer().isVenting;
    Wait(0.5);
}

rule: "Player: Imposter Venting"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (EventPlayer().isVenting)
{
    StopChasingVariable(EventPlayer().killCooldown);
    SetInvisible(EventPlayer(), InvisibleTo.All);
    EventPlayer().originalHero = HeroOf(EventPlayer());
    ForcePlayerHero(EventPlayer(), Hero.Zenyatta);
    SetMoveSpeed(EventPlayer(), 400);
    DisableMovementCollisionWithPlayers(EventPlayer());
}

rule: "Player: Imposter UnVenting"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (!EventPlayer().isVenting)
{
    StopChasingVariable(EventPlayer().killCooldown);
    ChaseVariableAtRate(EventPlayer().killCooldown, 0, 1.0, RateChaseReevaluation.None);
    ForcePlayerHero(EventPlayer(), EventPlayer().originalHero);
    EnableMovementCollisionWithPlayers(EventPlayer());
    SetMoveSpeed(EventPlayer(), 100);
    SetInvisible(EventPlayer(), InvisibleTo.None);
}


rule: "Player: Imposter Interact (Kill)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (EventPlayer().canKill)
if (!EventPlayer().isVenting)
if (EventPlayer().killCooldown == 0)
{
    EventPlayer().canVent = false;
    if (killPlayer(EventPlayer().closestCrew)) {
        EventPlayer().canKill = false;
        EventPlayer().killCooldown = KillCooldown.Value;
        checkEndGame();
    }
}

rule: "Player: Imposter Update Loop"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
{
    EventPlayer().killCooldown = KillCooldown.Value;
    StopChasingVariable(EventPlayer().killCooldown);
    ChaseVariableAtRate(EventPlayer().killCooldown, 0, 1.0, RateChaseReevaluation.None);
    EventPlayer().canKill = false;
    EventPlayer().canVent = false;
    EventPlayer().isVenting = false;
    while (gameState == GameState.Play) {
        playerUpdate(EventPlayer());
        imposterUpdate(EventPlayer());
        Wait(TICK);
    }
}