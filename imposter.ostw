import "main.ostw";

// Imposter variables
playervar define closestCrew;
playervar define canKill = false;
playervar define killCooldown = 0;
playervar define killBeamEffect;
playervar define killBeamEffectCountdown;
playervar define canVent = false;
playervar define isVenting = false;
playervar define releasedUlt;

// Imposter team variables
globalvar define canSabotage;
globalvar define sabotageCooldown;

define KILL_DISTANCE: 5;

/* Per-tick state update for imposters.
 */
void imposterUpdate(ref define player) {
    player.hudInteractString = "";
    player.canVent = isVentNearby(player);
    if (player.canVent) {
        player.hudInteractString = "Vent";
    }

    if (!player.isVenting) {
        findImposterNearestCrew(player);
    }
}

/* Find the nearest crew member, and determine if they are killable.
 */
void findImposterNearestCrew(ref define player) {
    player.closestCrew = RayCastHitPlayer(
        StartPOS: EyePosition(player),
        EndPOS: EyePosition(EventPlayer()) + KILL_DISTANCE * FacingDirectionOf(player),
        PlayersToInclude: AllAliveCrew(),
        PlayersToExclude: player
    );

    if (player.closestCrew != null) {
        player.canKill = true;
        if (player.killCooldown == 0) {
            player.hudInteractString = <"Kill <0> <1>", HeroIconString(HeroOf(closestCrew)), SafePlayerName(closestCrew)>;
        }
    } else {
        player.canKill = false;
    }
}

define isVentNearby(ref define player) {
    foreach (Vector v in global_vents) {
        if (DistanceBetween(PositionOf(player), v) <= 2.0) {
            return true;
        }
    }
    return false;
}

/* If target player is alive, kill them and return true.
 * Return false otherwise.
 */
define killPlayer(define target) "Kill Player" {
    if (IsAlive(target)) {
        target.corpse = new Corpse(target, PositionOf(target));
        target.hasCorpse = true;
        target.isAlive = false;
        return true;
    } else {
        return false;
    }
}

void resetSabotage() "Reset Sabotage" {
    sabotageCooldown = 0;
    canSabotage = true;
}

rule: "Global: Imposter Enable Sabotage"
Event.OngoingGlobal
if (sabotageCooldown == 0)
{
    canSabotage = true;
}

rule: "Player: Detect Ult button release"
Event.OngoingPlayer
if (!EventPlayer().releasedUlt)
if (!IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    EventPlayer().releasedUlt = true;
}

rule: "Player: Imposter Interact (Vent)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (EventPlayer().canVent)
{
    EventPlayer().canKill = false;
    EventPlayer().canVent = false;
    EventPlayer().isVenting = !EventPlayer().isVenting;
    Wait(0.5);
}

rule: "Player: Imposter Venting"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (EventPlayer().isAlive)
if (EventPlayer().isVenting)
{
    StopChasingVariable(EventPlayer().killCooldown);
    SetInvisible(EventPlayer(), InvisibleTo.All);
    EventPlayer().originalHero = HeroOf(EventPlayer());
    ForcePlayerHero(EventPlayer(), Hero.Zenyatta);
    SetMoveSpeed(EventPlayer(), 3 * MoveSpeed.Value);
    DisableMovementCollisionWithPlayers(EventPlayer());
}

rule: "Player: Imposter UnVenting"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (EventPlayer().isAlive)
if (!EventPlayer().isVenting)
{
    StopChasingVariable(EventPlayer().killCooldown);
    ChaseVariableAtRate(EventPlayer().killCooldown, 0, 1.0, RateChaseReevaluation.None);
    ForcePlayerHero(EventPlayer(), EventPlayer().originalHero);
    EnableMovementCollisionWithPlayers(EventPlayer());
    SetMoveSpeed(EventPlayer(), MoveSpeed.Value);
    SetInvisible(EventPlayer(), InvisibleTo.None);
}

rule: "Player: Destroy Kill Beam Effect"
Event.OngoingPlayer
if (EventPlayer().killBeamEffectCountdown == 0)
{
    DestroyEffect(EventPlayer().killBeamEffect);
}

rule: "Player: Imposter Interact (Kill)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().isAlive)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (!EventPlayer().isVenting)
if (EventPlayer().killCooldown == 0)
{
    
    define killTarget = RayCastHitPlayer(
        StartPOS: EyePosition(EventPlayer()),
        EndPOS: EyePosition(EventPlayer()) + KILL_DISTANCE * FacingDirectionOf(EventPlayer()),
        PlayersToInclude: AllAliveCrew(),
        PlayersToExclude: EventPlayer()
    );

    if (killTarget == null) return;

    EventPlayer().canVent = false;
    EventPlayer().canKill = false;

    CreateBeamEffect(
        VisibleTo: AllPlayers(),
        BeamType: BeamType.BadBeam,
        Color: Color.Purple,
        StartPosition: EventPlayer(),
        EndPosition: killTarget,
        Reevaluation: EffectRev.None
    );
    
    EventPlayer().killBeamEffect = LastCreatedEntity();
    EventPlayer().killBeamEffectCountdown = 1;
    StopChasingVariable(EventPlayer().killBeamEffectCountdown);
    ChaseVariableAtRate(EventPlayer().killBeamEffectCountdown, 0, 1, RateChaseReevaluation.None);

    if (killPlayer(killTarget)) {
        EventPlayer().killCooldown = KillCooldown.Value;
        PlayEffect(
            VisibleTo: AllPlayers(),
            Type: PlayEffect.ExplosionSound,
            Position: PositionOf(EventPlayer()),
            Radius: 100
        );
        PlayEffect(
            VisibleTo: AllPlayers(),
            Type: PlayEffect.BadExplosion,
            Color: Color.Purple,
            Position: LinearInterpolate(PositionOf(killTarget), PositionOf(EventPlayer()), 0.5) + Vector(0, 1, 0),
            Radius: 1.0
        );
        checkEndGame();
    } else {
        EventPlayer().killBeamEffectCountdown = 0;
    }
}

rule: "Player: Imposter Update Loop"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (playing)
if (EventPlayer().role == PlayerRole.IMPOSTER)
{
    EventPlayer().killCooldown = KillCooldown.Value;
    StopChasingVariable(EventPlayer().killCooldown);
    ChaseVariableAtRate(EventPlayer().killCooldown, 0, 1.0, RateChaseReevaluation.None);
    EventPlayer().canKill = false;
    EventPlayer().canVent = false;
    EventPlayer().isVenting = false;

    while (gameState == GameState.Play) {
        playerUpdate(EventPlayer());
        imposterUpdate(EventPlayer());
        renderHudInteractString(EventPlayer());
        Wait(TICK);
    }
}
