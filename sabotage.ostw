import "main.ostw";

// Sabotage Menu

enum SabotageType {
    None = -1,
    OverloadPower = 0,
    DisableComms = 1,
    WineShortage = 2
}

globalvar PlayerMenuOption[] sabotageOptions = [
    new MenuText("Select Sabotage"),
    new SabotageButton("Overload Power Transformers", 0, SabotageType.OverloadPower, 60),
    new SabotageButton("Cause A Wine Shortage", 0, SabotageType.WineShortage, 60),
    new SabotageButton("Disable Communications", 0, SabotageType.DisableComms, 30)
];

playervar define isSabotageMenuOpen;
playervar define renderedSabotageMenu;
playervar define sabotageMenuSelected;
playervar define sabotageMenuTextId;

rule: "Player: Imposter Ult (Sabotage)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (canSabotage)
if (EventPlayer().role == PlayerRole.IMPOSTER)
if (!EventPlayer().isSabotageMenuOpen)
if (sabotageInProgress == SabotageType.None)
if (EventPlayer().releasedUlt)
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    EventPlayer().releasedUlt = false;
    EventPlayer().isSabotageMenuOpen = true;
    EventPlayer().sabotageMenuSelected = 1;

    CreateHudText(
        VisibleTo   : EventPlayer(),
        Header      : EventPlayer().renderedSabotageMenu,
        HeaderColor : Color.Red,
        Text        : sabotageOptions[EventPlayer().sabotageMenuSelected].Controls,
        TextColor   : Color.Red,
        Location    : Location.Top,
        Spectators  : Spectators.VisibleNever,
        Reevaluation: HudTextRev.String,
        SortOrder   : 1
    );
    EventPlayer().sabotageMenuTextId = LastTextID();
    
    RenderSabotageMenu(EventPlayer());
}

rule: "Sabotage Menu: Ult (Close Menu)"
Event.OngoingPlayer
if (EventPlayer().isSabotageMenuOpen)
if (EventPlayer().releasedUlt)
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    releasedUlt = false;
    EventPlayer().isSabotageMenuOpen = false;
}

void RenderSabotageMenu(define player) "Sabotage: Render Menu" {
    player.renderedSabotageMenu = "";
    for (define i = 0; i < sabotageOptions.Length; i++) {
        player.renderedSabotageMenu = <"<0><1><2>",
            player.renderedSabotageMenu,
            sabotageOptions[i].RenderedLine(i == player.sabotageMenuSelected),
            i < sabotageOptions.Length - 1 ? "\n" : ""
        >;
    }
}

rule: "Sabotage Menu: Disable menu when not available"
Event.OngoingPlayer
if (gameState != GameState.Play || !canSabotage)
if (EventPlayer().isSabotageMenuOpen)
{
    EventPlayer().isSabotageMenuOpen = false;
}

rule: "Sabotage Menu: Destroy Menu"
Event.OngoingPlayer
if (!EventPlayer().isSabotageMenuOpen)
{
    DestroyHudText(EventPlayer().sabotageMenuTextId);
}

rule: "Sabotage Menu: Previous Option"
Event.OngoingPlayer
if (EventPlayer().isSabotageMenuOpen)
if (ThrottleOf(EventPlayer()).Z > 0)
{
    EventPlayer().sabotageMenuSelected--;
    if (EventPlayer().sabotageMenuSelected < 1) EventPlayer().sabotageMenuSelected = sabotageOptions.Length - 1;
    RenderSabotageMenu(EventPlayer());
}

rule: "Sabotage Menu: Next Option"
Event.OngoingPlayer
if (EventPlayer().isSabotageMenuOpen)
if (ThrottleOf(EventPlayer()).Z < 0)
{
    EventPlayer().sabotageMenuSelected++;
    if (EventPlayer().sabotageMenuSelected >= sabotageOptions.Length) EventPlayer().sabotageMenuSelected = 1;
    RenderSabotageMenu(EventPlayer());
}

rule: "Voting Menu: Press"
Event.OngoingPlayer
if (canSabotage)
if (EventPlayer().isSabotageMenuOpen)
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
    sabotageOptions[EventPlayer().sabotageMenuSelected].OnSelect();
}

class SabotageButton : PlayerMenuOption {

    public define Sabotage;
    public define Cooldown;
    
    public override define Controls: <"Press <0> to sabotage.", InputBindingString(ButtonValue(Button.Interact))>;

    public SabotageButton(ref define name, ref define value, ref define sabotage, ref define cooldown)
    {
        Name = name;
        Value = value;
        Sabotage = sabotage;
        Cooldown = cooldown;
    }

    public override define RenderedLine(define selected): <"<1><0>", Name, selected ? "▶" : "▷">;

    public override void OnSelect()
    {
        root.canSabotage = false;
        EventPlayer().isSabotageMenuOpen = false;
        root.sabotageCooldown = this.Cooldown == 0 ? root.SabotageCooldown.Value : this.Cooldown;
        StopChasingVariable(root.sabotageCooldown);
        ChaseVariableAtRate(root.sabotageCooldown, 0, 1, RateChaseReevaluation.None);
        SetMoveSpeed(root.MoveSpeed.Value);

        BigMessage(AllPlayers(), "Sabotage!");
        root.sabotageInProgress = this.Sabotage;
    }
}

// Sabotage Events

globalvar define sabotageInProgress = -1;
globalvar define sabotageInProgressHeader = "";
globalvar define sabotageInProgressValue = "";
globalvar define[] sabotageLocations;
globalvar define[] sabotageEntityIds;
globalvar define[] sabotageTextIds;

void CleanUpSabotage() "Sabotage: Clean Up" {
    sabotageInProgress = -1;
    sabotageLocations = null;
    sabotageInProgressHeader = "";
    sabotageInProgressValue = "";

    foreach (define id in sabotageEntityIds) {
        DestroyEffect(id);
    }
    foreach (define id in sabotageTextIds) {
        DestroyInWorldText(id);
    }
    sabotageEntityIds = [];
    sabotageTextIds = [];
    foreach (define p in AllPlayers()) {
        updateHudStrings(p);
    }
}

void pauseSabotage() {
    StopChasingVariable(sabotageInProgressValue);
}

void unpauseSabotage() {
    StopChasingVariable(sabotageInProgressValue);
    ChaseVariableAtRate(sabotageInProgressValue, 0, 1, RateChaseReevaluation.None);
}

void fixSabotageAt(ref Vector v) {
    if (sabotageInProgress == SabotageType.OverloadPower) {
        fixTransformerBoxAt(v);
    } else if (sabotageInProgress == SabotageType.DisableComms) {
        fixCommsAt(v);
    }
}

rule: "Sabotage: Fail"
if (gameState == GameState.Play)
if (sabotageInProgress == SabotageType.OverloadPower || sabotageInProgress == SabotageType.WineShortage)
if (sabotageInProgressValue == 0)
{
    imposterVictory();
}

// Power Overload

globalvar Vector[] TransformerBoxes = [
    Vector(-167.03, 6.79, -38.47),
    Vector(-190.25, -2.86, -68.97)
];
globalvar define[] transformerBoxComplete;

rule: "Start Sabotage: Power Overload"
if (sabotageInProgress == SabotageType.OverloadPower)
{
    sabotageInProgressHeader = "Power Overload: Reset Circuit Breakers!";
    StopChasingVariable(sabotageInProgressValue);
    ChaseVariableAtRate(sabotageInProgressValue, 0, 1, RateChaseReevaluation.None);
    sabotageInProgressValue = 60;

    transformerBoxComplete = [false, false];
    sabotageLocations = TransformerBoxes;

    drawTransformerBox(0);
    drawTransformerBox(1);
}

void fixTransformerBoxAt(ref Vector v) {
    define idx = IndexOfArrayValue(TransformerBoxes, v)
    if (idx == -1) return;
    transformerBoxComplete[idx] = true;

    PlayEffect(
        VisibleTo: AllPlayers(),
        Type: PlayEffect.RingExplosionSound,
        Position: PositionOf(EventPlayer()),
        Radius: 100
    );

    if (IsTrueForAll(transformerBoxComplete, ArrayElement() == true)) {
        CleanUpSabotage();
    }
}

void drawTransformerBox(ref define idx) {
    CreateEffect(
        VisibleTo: transformerBoxComplete[idx] ? EmptyArray() : AllPlayers(),
        Type: Effect.Sphere,
        Color: Color.Red,
        Position: TransformerBoxes[idx],
        Radius: 0.75,
        Reevaluation: EffectRev.VisibleTo
    );
    ModifyVariable(sabotageEntityIds, Operation.AppendToArray, LastCreatedEntity());

    CreateInWorldText(
        VisibleTo: transformerBoxComplete[idx] ? EmptyArray() : FilteredArray(AllPlayers(), DistanceBetween(ArrayElement(), TransformerBoxes[idx]) > 5),
        Header: "▽",
        Position: TransformerBoxes[idx],
        Scale: 5,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleTo,
        TextColor: Color.Red
    );
    ModifyVariable(sabotageTextIds, Operation.AppendToArray, LastTextID());

    CreateInWorldText(
        VisibleTo: transformerBoxComplete[idx] ? EmptyArray() : PlayersWithinRadius(TransformerBoxes[idx], 5),
        Header: "Reset Circuit Breaker",
        Position: TransformerBoxes[idx],
        Scale: 4,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleTo,
        TextColor: Color.Red
    );
    ModifyVariable(sabotageTextIds, Operation.AppendToArray, LastTextID());
}

// Disable Communications

globalvar Vector CommunicationsHub = Vector(-217.24, 2.0, 6.90);

rule: "Start Sabotage: Disable Comms"
if (sabotageInProgress == SabotageType.DisableComms)
{
    sabotageInProgressHeader = "Communications Disabled: Reprogram Comms Hub!";
    sabotageLocations = [CommunicationsHub];

    StopChasingVariable(sabotageInProgressValue);
    sabotageInProgressValue = 0;

    foreach (define p in AllPlayers()) {
        updateHudStrings(p);
    }

    drawCommunicationsHub();
}

void drawCommunicationsHub() {
    CreateEffect(
        VisibleTo: AllPlayers(),
        Type: Effect.Sphere,
        Color: Color.Red,
        Position: CommunicationsHub,
        Radius: 0.75,
        Reevaluation: EffectRev.None
    );
    ModifyVariable(sabotageEntityIds, Operation.AppendToArray, LastCreatedEntity());

    CreateInWorldText(
        VisibleTo: FilteredArray(AllPlayers(), DistanceBetween(ArrayElement(), CommunicationsHub) > 5),
        Header: "▽",
        Position: CommunicationsHub,
        Scale: 5,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleTo,
        TextColor: Color.Red
    );
    ModifyVariable(sabotageTextIds, Operation.AppendToArray, LastTextID());

    CreateInWorldText(
        VisibleTo: PlayersWithinRadius(CommunicationsHub, 5),
        Header: "Reprogram Comms Hub",
        Position: CommunicationsHub,
        Scale: 4,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleTo,
        TextColor: Color.Red
    );
    ModifyVariable(sabotageTextIds, Operation.AppendToArray, LastTextID());
}

void fixCommsAt(ref Vector v) {
    PlayEffect(
        VisibleTo: AllPlayers(),
        Type: PlayEffect.RingExplosionSound,
        Position: PositionOf(EventPlayer()),
        Radius: 100
    );
    CleanUpSabotage();
}

// Wine Shortage

globalvar Vector[] wineRefillLocations = [
    Vector(-214.23, 5, 0.72),
    Vector(-191.42, 5, -22.43)
];

rule: "Start Sabotage: Wine Shortage"
if (sabotageInProgress == SabotageType.WineShortage)
{
    sabotageInProgressHeader = "Wine Shortage: Restock The Wine Together!";
    sabotageLocations = wineRefillLocations;

    StopChasingVariable(sabotageInProgressValue);
    ChaseVariableAtRate(sabotageInProgressValue, 0, 1, RateChaseReevaluation.None);
    sabotageInProgressValue = 60;

    foreach (define p in AllPlayers()) {
        updateHudStrings(p);
    }

    drawWineShortage(wineRefillLocations[0]);
    drawWineShortage(wineRefillLocations[1]);
}

void drawWineShortage(define position) {
    CreateEffect(
        VisibleTo: AllPlayers(),
        Type: Effect.Ring,
        Color: Color.Red,
        Position: position,
        Radius: 1,
        Reevaluation: EffectRev.None
    );
    ModifyVariable(sabotageEntityIds, Operation.AppendToArray, LastCreatedEntity());

    CreateInWorldText(
        VisibleTo: FilteredArray(AllPlayers(), DistanceBetween(ArrayElement(), position) > 5),
        Header: "▽",
        Position: position + Vector(0, 0.5, 0),
        Scale: 5,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleTo,
        TextColor: Color.Red
    );
    ModifyVariable(sabotageTextIds, Operation.AppendToArray, LastTextID());

    CreateInWorldText(
        VisibleTo: PlayersWithinRadius(position, 5),
        Header: "Stand In Both Rings To Restock The Wine",
        Position: position + Vector(0, 0.5, 0),
        Scale: 4,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleTo,
        TextColor: Color.Red
    );
    ModifyVariable(sabotageTextIds, Operation.AppendToArray, LastTextID());
}

rule: "Sabotage: Disable Comms: Detect Refill"
if (sabotageInProgress == SabotageType.WineShortage)
if (IsTrueForAny(AllPlayers(), ArrayElement().isAlive && !ArrayElement().isVenting && DistanceBetween(ArrayElement(), wineRefillLocations[0]) <= 3) && IsTrueForAny(AllPlayers(), ArrayElement().isAlive && !ArrayElement().isVenting && DistanceBetween(ArrayElement(), wineRefillLocations[1]) <= 3))
{
    PlayEffect(
        VisibleTo: AllPlayers(),
        Type: PlayEffect.RingExplosionSound,
        Position: wineRefillLocations[0],
        Radius: 100
    );
    PlayEffect(
        VisibleTo: AllPlayers(),
        Type: PlayEffect.RingExplosionSound,
        Position: wineRefillLocations[1],
        Radius: 100
    );
    CleanUpSabotage();
}
