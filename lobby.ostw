import "main.ostw";

globalvar define hostMenuSelected = 0;
globalvar define renderedHostMenu = "";

globalvar NumberOption NumImposters = new NumberOption("Imposter Count", 1, 3, 3, 1, "");
globalvar NumberOption VotingTime = new NumberOption("Voting Time", 15, 180, 120, 5, "");
globalvar NumberOption NumTasks = new NumberOption("Task Count", 2, 8, 5, 1, "");
globalvar NumberOption KillCooldown = new NumberOption("Kill Cooldown", 5, 120, 25, 5, "");
globalvar NumberOption KillDistance = new NumberOption("Kill Distance", 1, 20, 10, 1, "");
globalvar NumberOption SabotageCooldown = new NumberOption("Sabotage Cooldown", 5, 120, 10, 5, "");
globalvar NumberOption NumBots = new NumberOption("Bot Count", 0, 9, 0, 1, "");
globalvar NumberOption MoveSpeed = new NumberOption("Move Speed", 50, 300, 140, 10, "");
globalvar NumberOption ForceHostRole = new MultipleOption("Force Host Role", ["No", "Crew", "Imposter", "Fool"]);
globalvar NumberOption FoolEnabled = new MultipleOption("Fool Enabled", ["No", "Yes", "Always"]);

globalvar HostMenuOption[] options = [
    new ActionButton("Start Game", 0),
    NumImposters,
    VotingTime,
    NumTasks,
    KillCooldown,
    KillDistance,
    MoveSpeed,
    NumBots,
    ForceHostRole,
    FoolEnabled
];

void RenderOptions() "Host Menu: Render Options"
if (gameState == GameState.Lobby)
{
    renderedHostMenu = "";
    for (define i = 0; i < options.Length; i++) {
        renderedHostMenu = <"<0><1><2>", renderedHostMenu, options[i].RenderedLine(i == hostMenuSelected), i < options.Length - 1 ? "\n" : "">;
    }
}

rule: "Global: Start Lobby"
if (gameState == GameState.Lobby)
{
    SetMoveSpeed(AllPlayers(), 0);
    RenderOptions();

    CreateHudText(
        HostPlayer(),
        Subheader: "You are the host player. Please configure and start the game.",
        SubheaderColor: Color.White,
        Location: Location.Top,
        SortOrder: 1,
        Spectators: Spectators.VisibleNever
    );

    CreateHudText(
        FilteredArray(AllPlayers(), ArrayElement() != HostPlayer()),
        Subheader: "You are not the host player. Please wait for the host to start the game.",
        SubheaderColor: Color.White,
        Location: Location.Top,
        SortOrder: 1,
        Spectators: Spectators.VisibleNever
    );

    CreateHudText(
        AllPlayers(),
        Header: renderedHostMenu,
        HeaderColor: Color.White,
        Location: Location.Top,
        SortOrder: 2,
        Spectators: Spectators.VisibleNever
    );

    CreateHudText(
        AllPlayers(),
        Text: options[hostMenuSelected].Controls,
        TextColor: Color.White,
        Location: Location.Top,
        SortOrder: 3,
        Spectators: Spectators.VisibleNever
    );
}

rule: "Host Menu: Previous Option"
if (gameState == GameState.Lobby)
if (ThrottleOf(HostPlayer()).Z > 0)
{
    hostMenuSelected--;
    if (hostMenuSelected < 0) hostMenuSelected = options.Length - 1;
    RenderOptions();
}

rule: "Host Menu: Next Option"
if (gameState == GameState.Lobby)
if (ThrottleOf(HostPlayer()).Z < 0)
{
    hostMenuSelected++;
    if (hostMenuSelected >= options.Length) hostMenuSelected = 0;
    RenderOptions();
}

rule: "Host Menu: Left"
if (gameState == GameState.Lobby)
if (ThrottleOf(HostPlayer()).X > 0)
{
    options[hostMenuSelected].OnLeft();
}

rule: "Host Menu: Right"
if (gameState == GameState.Lobby)
if (ThrottleOf(HostPlayer()).X < 0)
{
    options[hostMenuSelected].OnRight();
}

rule: "Host Menu: Press"
if (gameState == GameState.Lobby)
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    options[hostMenuSelected].OnSelect();
}

class HostMenuOption {
    public define Name;
    public define Value;
    protected virtual define ValueString: Value;
    public virtual define RenderedLine(define selected): <"<3><0>: <1><2>", Name, ValueString, ValueTag, selected ? "▶" : "▷">;
    public define ValueTag = "";
    public virtual define Controls: "";
    public virtual void OnLeft() {}
    public virtual void OnRight() {}
    public virtual void OnSelect() {}
}

class ActionButton : HostMenuOption {
    private define Action;
    public override define Controls: <"Press <0> to activate the currently selected option.", InputBindingString(ButtonValue(Button.Interact))>;

    public ActionButton(ref define name, ref define action)
    {
        Name = name;
        Action = action;
    }

    public override define RenderedLine(define selected): <"<1><0>", Name, selected ? "▶" : "▷">;

    public override void OnSelect() {
        if (Action == 0) {
            if (CountOf(AllPlayers()) + root.NumBots.Value > root.NumImposters.Value * 2) {
                BigMessage(AllPlayers(), "Starting Game...");
                root.spawnBots(root.NumBots.Value);
                DestroyAllHudText();
                Wait(root.NumBots.Value * 0.5);
                root.assignRoles(root.NumImposters.Value);
                root.gameState = GameState.Start;
            } else {
                SmallMessage(AllPlayers(), "Not enough players vs. Imposter count");
            }
        }
    }
}

class MultipleOption : HostMenuOption {
    public override define Controls: "Walk left or right to change the currently selected option.";
    private define[] Options;
    private override define ValueString: this.Options[this.Value];

    public NumberOption(ref define name, ref define[] options) {
        this.Name = name;
        this.Options = options;
    }

    public override void OnSelect() {
        Value = 0;
        root.RenderOptions();
    }

    public override void OnLeft() {
        this.Value = Max(this.Value - 1, 0);
        root.RenderOptions();

        Wait(0.25, WaitBehavior.AbortWhenFalse);
        Loop();
    }

    public override void OnRight() {
        Value = Min(Value + 1, Options.Length - 1);
        root.RenderOptions();

        Wait(0.25, WaitBehavior.AbortWhenFalse);
        Loop();
    }

}

class NumberOption : HostMenuOption {
    public override define Controls: "Walk left or right to change the currently selected option.";
    private define Min;
    private define Max;
    private define DefaultValue;
    private define Step;

    public NumberOption(ref define name, ref define min, ref define max, ref define defaultValue, ref define step, ref define valueTag = "") {
        Name = name;
        Min = min;
        Max = max;
        Value = defaultValue;
        DefaultValue = defaultValue;
        Step = step;
        ValueTag = valueTag;
    }

    public override void OnSelect() {
        Value = DefaultValue;
        root.RenderOptions();
    }

    public override void OnLeft() {
        Value = Max(Value - Step, Min);
        root.RenderOptions();

        Wait(0.25, WaitBehavior.AbortWhenFalse);
        Loop();
    }

    public override void OnRight() {
        Value = Min(Value + Step, Max);
        root.RenderOptions();

        Wait(0.25, WaitBehavior.AbortWhenFalse);
        Loop();
    }
}