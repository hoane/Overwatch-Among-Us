import "../main.ostw";

enum PlayerRole {
    CREW,
    IMPOSTER,
    FOOL
    
}

globalvar Vector circleCenter = Vector(-208.7, 0.0, -16.4);

globalvar define[] availableHeroes = [
    Hero.Ana,
    Hero.Ashe,
    Hero.Bastion,
    Hero.Baptiste,
    Hero.Roadhog,
    Hero.Junkrat,
    Hero.Mccree,
    Hero.Mei,
    Hero.Winston,
    Hero.Widowmaker,
    Hero.Tracer,
    Hero.Zarya
];

// Player Variables
playervar PlayerRole role;
playervar define isAlive = true;
playervar Task[] incompleteTasks;
playervar Task[] completeTasks = EmptyArray();
playervar Corpse corpse;
playervar define hasCorpse = false;
playervar define originalHero;
playervar define hasButtonPress = true;

/* Initial setup for players.
 * Disables most abilities and ui elements.
 */
rule: "Player Setup"
Event.OnPlayerJoin
{
    DisableGameModeHud(EventPlayer());
    DisableKillFeed(EventPlayer());
    DisableSpectate(EventPlayer());
    DisableHeroHud(EventPlayer())
    DisableSpectateHUD(EventPlayer());
    EnableNameplates(EventPlayer());
    DisableRespawning(EventPlayer());
    DisableScoreboard(EventPlayer());
    SetUltimateAbilityEnabled(EventPlayer(), false);
    SetMeleeEnabled(EventPlayer(), false);
    SetReloadEnabled(EventPlayer(), false);
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);
    SetPrimaryFireEnabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
    SetJumpEnabled(EventPlayer(), false);
    SetDamageReceived(EventPlayer(), 0);
    SetMoveSpeed(EventPlayer(), 0);
}

rule: "Player: Initialization"
Event.OngoingPlayer
if (gameState == GameState.Lobby)
{
    EventPlayer().originalHero = availableHeroes[SlotOf(EventPlayer())];
    ForcePlayerHero(EventPlayer(), EventPlayer().originalHero);
}

rule: "Player: State Start"
Event.OngoingPlayer
if (gameState == GameState.Start)
{
    EventPlayer().originalHero = availableHeroes[SlotOf(EventPlayer())];
    ForcePlayerHero(EventPlayer(), EventPlayer().originalHero);
    createPlayerPip(EventPlayer(), SlotOf(EventPlayer()));
    if (EventPlayer().role == PlayerRole.IMPOSTER) {
        createImposterAura(EventPlayer());
        createImposterTargetAura(EventPlayer());
    }
    createDeathAura(EventPlayer());
    putPlayerInCircle(EventPlayer());
    assignTasks(EventPlayer(), NumTasks.Value);
}

void createDeathAura(define player) {
    CreateEffect(
        VisibleTo: (gameState == GameState.Voting && !player.isAlive) ? AllPlayers() : (player.isAlive ? EmptyArray() : AllGhosts()),
        Position: player,
        Type: Effect.Cloud,
        Color: Color.White,
        Reevaluation: EffectRev.VisibleToPositionAndRadius,
        Radius: 1
    );
}

define respawnLocation: Vector(-199.46, 1.01, -7.59);

rule: "Player: On Death"
Event.OnDeath
{
    Resurrect(EventPlayer());
    Teleport(EventPlayer(), respawnLocation);
}

/* Calculates a position on the edge of a circle based on its center, radius, and the target 'slot' of the circle.
 */
Vector circlePosition(Vector center, ref define slot, ref define totalSlots, define radius) {
    define radians = (2 * Pi() * slot) / totalSlots;
    return Vector(XOf(center) + (radius * CosineFromRadians(radians)), YOf(center), ZOf(center) + (radius * SineFromRadians(radians)));
}

/* Place a player in the starting circle.
 */
void putPlayerInCircle(ref define player) {
    define pos = circlePosition(circleCenter, SlotOf(player), 10, 8.0)
    Teleport(AllPlayers()[SlotOf(player)], pos);
    SetFacing(AllPlayers()[SlotOf(player)], circleCenter - pos);
}

/* Set player status roles randomly per the imposter count.
 */
void assignRoles(ref define imposters) {
    AllPlayers().role = PlayerRole.CREW;
    ChooseArray(AllPlayers(), imposters).role = PlayerRole.IMPOSTER;

    if (ForceHostRole.Value == 1) {
        HostPlayer().role = PlayerRole.CREW;
    } else if (ForceHostRole.Value == 2) {
        HostPlayer().role = PlayerRole.IMPOSTER;
    } else if (ForceHostRole.Value == 3) {
        HostPlayer().role = PlayerRole.FOOL;
    }

    if (FoolEnabled.Value == 2 || (FoolEnabled.Value == 1 && RandomReal(0, 1) <= 0.5)) {
        FirstOf(AllAliveCrew()).role = PlayerRole.FOOL;
    }
}

/* Give each player a selection of random tasks.
 * Tasks only contribute to the total task target if the player is Crew.
 */
void assignTasks(ref define player, ref define numTasks) {
    player.numTasks = numTasks;
    player.incompleteTasks = ChooseArray(global_tasks, numTasks);
    if (player.role == PlayerRole.CREW) {
        totalTaskCount += numTasks;
    }
}

/* Update the hud task strings.
 */
void updateHudStrings(ref define player) {
    if (sabotageInProgress == SabotageType.DisableComms) {
        player.hudTaskString = "COMMS DISABLED"
    } else {
        player.hudTaskString = <"TODO:<0><1><2><3><4><5>",
            player.incompleteTasks.Length > 0 ? <"\n▷ <0>", player.incompleteTasks[0].Name> : "",
            player.incompleteTasks.Length > 1 ? <"\n▷ <0>", player.incompleteTasks[1].Name> : "",
            player.incompleteTasks.Length > 2 ? <"\n▷ <0>", player.incompleteTasks[2].Name> : "",
            player.incompleteTasks.Length > 3 ? <"\n▷ <0>", player.incompleteTasks[3].Name> : "",
            player.incompleteTasks.Length > 4 ? <"\n▷ <0>", player.incompleteTasks[4].Name> : "",
            player.incompleteTasks.Length > 5 ? <"\n▷ <0>", player.incompleteTasks[5].Name> : ""
        >;
        player.hudCompleteTaskString = <"Done:<0><1><2><3><4><5>",
            player.completeTasks.Length > 0 ? <"\n▶ <0>", player.completeTasks[0].Name> : "",
            player.completeTasks.Length > 1 ? <"\n▶ <0>", player.completeTasks[1].Name> : "",
            player.completeTasks.Length > 2 ? <"\n▶ <0>", player.completeTasks[2].Name> : "",
            player.completeTasks.Length > 3 ? <"\n▶ <0>", player.completeTasks[3].Name> : "",
            player.completeTasks.Length > 4 ? <"\n▶ <0>", player.completeTasks[4].Name> : "",
            player.completeTasks.Length > 5 ? <"\n▶ <0>", player.completeTasks[5].Name> : ""
        >;
    }
}

rule: "Player: !isAlive"
Event.OngoingPlayer
if (gameState == GameState.Play || gameState == GameState.Voting)
if (!EventPlayer().isAlive)
{
    BigMessage(EventPlayer(), "Killed!");
    DisableMovementCollisionWithPlayers(EventPlayer());
    SetInvisible(EventPlayer(), InvisibleTo.All);
    ForcePlayerHero(EventPlayer(), Hero.Zenyatta);
    SetMoveSpeed(EventPlayer(), 2 * MoveSpeed.Value);
}

rule: "Player: Interact (Fix Sabotage)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (EventPlayer().isAlive)
if (!EventPlayer().isVenting)
{
    define[] targetSabotages = FilteredArray(sabotageLocations, DistanceBetween(EventPlayer(), ArrayElement()) <= InteractRadius);
    if (targetSabotages.Length == 0) {
        Wait(0.5);
        return;
    }

    fixSabotageAt(FirstOf(targetSabotages));
}

rule: "Player: Reload (Report Corpse)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (IsButtonHeld(EventPlayer(), Button.Reload))
if (EventPlayer().isAlive)
if (!EventPlayer().isVenting)
{
    define[] targetCorpses = FilteredArray(AllPlayers(), ArrayElement().hasCorpse && DistanceBetween(EventPlayer(), ArrayElement().corpse.Position) <= 7.0);
    if (targetCorpses.Length == 0) {
        Wait(0.5);
        return;
    }

    CleanUpSabotage();
    BigMessage(AllPlayers(), <"<0> Reported Dead Player!", SafePlayerName(EventPlayer())>);

    foreach (define p in FilteredArray(AllPlayers(), ArrayElement().hasCorpse)) {
        DestroyEffect(p.corpse.EntityId);
        DestroyInWorldText(p.corpse.TextId);
    }
    AllPlayers().hasCorpse = false;
    StartVotingRound();
}

rule: "Player: Reload (Emergency Button)"
Event.OngoingPlayer
if (gameState == GameState.Play)
if (sabotageInProgress == SabotageType.None)
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (EventPlayer().hasButtonPress)
if (EventPlayer().isAlive)
if (!EventPlayer().isVenting)
if (!EventPlayer().isSabotageMenuOpen)
if (DistanceBetween(EventPlayer(), EmergencyButtonLocation) < 5)
{
    EventPlayer().hasButtonPress = false;
    BigMessage(AllPlayers(), <"<0> Called Emergency Meeting!", SafePlayerName(EventPlayer())>);

    foreach (define p in FilteredArray(AllPlayers(), ArrayElement().hasCorpse)) {
        DestroyEffect(p.corpse.EntityId);
        DestroyInWorldText(p.corpse.TextId);
    }
    AllPlayers().hasCorpse = false;
    StartVotingRound();
}